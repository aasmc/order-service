spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order
  config:
    import: "optional:configserver:"
  cloud:
    function:
      definition: dispatchOrder # definition of the function managed by Spring Cloud Function
    stream:
      bindings:
        dispatchOrder-in-0: # the input binding
          destination: order-dispatched # the actual name at the broker that the binder binds to
          # The consumer group interested in the destination
          group: ${spring.application.name}
         # Output binding created and managed by StreamBridge
        acceptOrder-out-0:
          destination: order-accepted
      # RabbitMQ specific configuration for the Spring Cloud Stream bindings
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              # Makes the acceptOrder-out-0 binding transactional
              transacted: true
    config:
      uri: http://localhost:8888
      request-connect-timeout: 10000 # 10s
      request-read-timeout: 10000 # 10s
      fail-fast: false # In production set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s

server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    # How long to wait before closing a TCP connection if no data is transferred
    idle-timeout: 15s

polar:
  catalog-service-uri: "http://localhost:9001"